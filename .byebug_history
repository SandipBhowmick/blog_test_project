c
params[:user][:password]
params[:user].
params[:user][:password]
params[:user].inspect
params[:user]
c
@q.result.length
c
@q.result.length
@q.result.class
@q.result
@q
c
params[:q][:id_eq]
params[:q].class
params[:q][0]
params[:q]
c
params[:q]
c
category.id
category
category.parent_id
c
Category.where(:id => category.parent_id).first
category
categories
@post.category_id
category
@find_category
c
self.subcategory_id
Category.where(:parent_id => self.category_id).first
c
self.subcategory_id
c
self.subcategory_id
c
self.subcategory_id
c
self.subcategory_id 
self.subcategory_id == nil
Category.where(:parent_id => self.category_id).first
Category.where(:parent_id => self.category_id)
c
Category.where(:parent_id => self.category_id).first
c
request.ip
request.user_agent
request.USER_AGENT
request.HTTP_USER_AGENT
request
c
request
c
request.user_agent
request.remote_ip
request.each do |t|
request do |t|
request
c
UserSession.find_by_user_id(session[:current_user_id])
session[:current_user_id]
c
session[:current_user_id]
          session[:email] = authorized_user.email
c
authorized_user.id
session[:current_user_id]
c
session[:current_user_id]
(session[:current_user_id]
UserSession.all
session[:current_user_id]
c
UserSession.all
session[:current_user_id]
UserSession.find_by_user_id(session[:current_user_id])
c
session[:current_user_id]
UserSession.all
c
UserSession.find_by_user_id(authorized_user.id)
c
u=UserSession.all
u=UserSession.find(:user_id =>20)
u=UserSession.find_by_user_id(20)
u
u=UserSession.find_by_user_id(authorized_user.id)
UserSession.find_by_user_id(authorized_user.id)
authorized_user.id
authorized_user
 UserSession.find_by_id(authorized_user.id)
c
UserSession.find(session[:current_user_id])
UserSession.all
session[:current_user_id]
c
"abc".eql?"abd"
"abc".eql?"abc"
user_password_params[:password].match(user_password_params[:password])
c
flash[:notice]
c
flash[:notice]
c
flash[:notice]
user_password_params[:password].length
c
user_password_params[:password].class
c
user_password_params[:password]
c
@user.errors
c
if @user.update_attributes(user_password_params)
user_password_params
@user.update_attributes(user_password_params)
c
c\
c
Post.where(:user_id => @followers)
@followers
c
@posts
c
t
c
t
c
@posts
c
@follower_ids
c
@follower_ids
session[:current_user_id]
c
session[:current_user_id]
@follower_ids
c
@user
@follower_ids
c
@users
c
@follow_users
@follow_users.posts
@follow_users_post
c
@follow_users.posts
@user
@follow_users
@follow_users_post
c
@follow_users.posts
@follow_users
@follow_users_post
c
@user.follows
@user
c
flash[:image]
flash[:body]
c
comment_params[:image].is_a?String
comment_params[:image].is_a?
comment_params[:image].is_s?
comment_params[:image].class
comment_params[:image]
if (comment_params[:image].class == 'string')
c
params
c
result
c
comment_params
comment_params["user_id"]=20
comment_params
c
@comment.errors
c
@comment.errors
c
@post.comments.create(comment_params).valid?
n
n = @post.comments.create(comment_params)
n 
n = @post.comments.create(comment_params)
n = @post.comments.create
n.valid?
n = @post.comments.new
@post.comments.new
@post.build
@post.build_comments
@post.build_comment
@post.create_comment
@post =Post.find(params[:post_id])
@comment = @post.create_comment(comment_params)
@comment = @post.create_comments(comment_params)
@comment = @post.comments.build(comment_params)
@post =Post.find(params[:post_id])
c
@comment.save
@comment
@comment = @post.comments.build(comment_params)
@comment = @post.comments.create(comment_params)
comment_params
@post =Post.find(params[:post_id])
params
quit
c
cc
c
instance.error_message.first
c
instance.error_message.first
instance.error_message
instance.class
instance.classs
instance
c
@current_user
c
params
c
params[:id]
params[:follow]
params[follow]
params
c
@current_user
params.inspect
params[:user]
params
c
database_data.name
self.name
self.compare(database_data)
self == database_data
database_data
self
c
self
database_data
database_data.eql?(self)
database_data==self
database_data.compare(self)
self
database_data
c
(database_data).class
self.compare(database_data)
self
name
id
